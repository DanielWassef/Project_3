version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_njsnpm:
    description: Install NodeJS and NPM
    steps:
      - run:
          name: Install NodeJS and NPM
          when: on_fail
          command: |          
            sudo apt update -y
            sudo apt install nodejs npm -y
            sudo apt install tar gzip -y

  setup_aws-cli:
    description: Setup aws-cli
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION

  onfail_install_aws-cli:
    description: Install aws-cli On Fail
    steps:  
      - run:
          name: Install aws-cli on rollback
          when: on_fail
          command: |
            sudo apt install unzip -y
            curl -k "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - setup_aws-cli            

  install_aws-cli:
    description: Install aws-cli
    steps:  
      - run:
          name: Install aws-cli
          command: |
            sudo apt install unzip -y
            curl -k "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - setup_aws-cli                  

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - install_njsnpm    
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # curl -k command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            echo "curl -k https://kvdb.io/${kvdb_b}/logmigration_${CIRCLE_WORKFLOW_ID:0:7}" 
            SUCCESS=$(curl -k https://kvdb.io/${kvdb_b}/logmigration_${CIRCLE_WORKFLOW_ID:0:7} )
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - setup_aws-cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=FWD-Prj3-be run=${CIRCLE_WORKFLOW_ID:0:7}\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=FWD-Prj3-fe \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "output = yaml" >> ~/.aws/config
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:run,Values=${CIRCLE_WORKFLOW_ID:0:7}
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:run,Values=${CIRCLE_WORKFLOW_ID:0:7} | cut -c 5->> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker: 
      - image: cimg/base:stable
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["00:35:2d:41:87:37:9c:6e:25:9a:48:2d:9e:db:04:5f"]
      - attach_workspace:
          at: ./
      - install_ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt -u ubuntu .circleci/ansible/configure-server.yml
            exit 1 ###############################################################################################
      - onfail_install_aws-cli
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - attach_workspace:
          at: ./          
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            curl -k -d '-1' https://kvdb.io/${kvdb_b}/logmigration_${CIRCLE_WORKFLOW_ID:0:7} 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k -d '1' https://kvdb.io/${kvdb_b}/logmigration_${CIRCLE_WORKFLOW_ID:0:7} 
            fi
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
            - backend/migrations_dump.txt
      - revert-migrations            
      - onfail_install_aws-cli
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install nodejs npm -y
            sudo apt install tar gzip -y
      - restore_cache:
          keys: [frontend-build]            
      - attach_workspace:
          at: ./               
      - install_aws-cli
      - run:
          name: Get backend url
          command: |
            echo "output = yaml" >> ~/.aws/config
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:run,Values=${CIRCLE_WORKFLOW_ID:0:7} | cut -c 5-)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL=http://${BACKEND_IP}:3030 >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - revert-migrations          
      - destroy-environment
                              
  deploy-backend:
    docker: 
      - image: cimg/base:stable
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["00:35:2d:41:87:37:9c:6e:25:9a:48:2d:9e:db:04:5f"]
      - attach_workspace:
          at: ./
      - restore_cache:
          keys: [backend-build]    
      - install_ansible
      - run:
          name: Install dependencies
          command: |
            sudo apt install nodejs npm -y
            sudo apt install tar gzip -y
            cd backend
            npm i
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - onfail_install_aws-cli
      - destroy-environment      

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(grep '^[0-9]' .circleci/ansible/inventory.txt)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}/api/status   
            curl ${API_URL}/api/status       
            if curl ${API_URL}/api/status | grep -i "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep -i "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations            
      - onfail_install_aws-cli
      - destroy-environment              

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - setup_aws-cli
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text >> .circleci/files/oldwf.txt
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/files/oldwf.txt                 
      - revert-migrations            
      - destroy-environment    

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - setup_aws-cli
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip      
      - attach_workspace:
          at: ./
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(cat .circleci/files/oldwf.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]